<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE
        mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.teamProject.lostArkProject.teaching.dao.MessageDAO">
    <!--  멘토가 멘티 신청을 수락(ACCEPTED)으로 UPDATE -->
    <update id="acceptMenteeApply" parameterType="MenteeApplyDTO">
        UPDATE MENTEE_APPLY
        SET apply_status = 'ACCEPTED'
        WHERE mentor_member_id = #{mentorMemberId}
          AND mentee_member_id = #{menteeMemberId}
          AND apply_status = 'REQUESTED'
    </update>

    <!--  멘토가 멘티 신청을 거절(REJECTED)과 거절 사유와 함께 UPDATE -->
    <update id="rejectMenteeApplyWithReason" parameterType="MenteeApplyDTO">
        UPDATE MENTEE_APPLY
        SET apply_status = 'REJECTED',
            rejected_reason = #{rejectedReason}
        WHERE mentor_member_id = #{mentorMemberId}
          AND mentee_member_id = #{menteeMemberId}
          AND apply_status = 'REQUESTED'
    </update>

    <!--  차단된 멘티 정보를 DISABLE_MENTEE 테이블에 INSERT -->
    <insert id="insertDisableMentee" parameterType="map">
        INSERT INTO DISABLE_MENTEE (MENTOR_MEMBER_ID, MENTEE_MEMBER_ID)
        VALUES (#{mentorMemberId}, #{menteeMemberId})
    </insert>

    <select id="getMenteeApplyDetail" parameterType="map" resultType="MenteeApplyDTO">
        SELECT 
            mentee_member_id as menteeMemberId,
            apply_status as applyStatus,
            rejected_reason as rejectedReason,
            created_at as createdAt
        FROM MENTEE_APPLY
        WHERE mentee_member_id = #{menteeMemberId}
          AND mentor_member_id = #{mentorMemberId}
    </select>

    <!-- <select id="getMenteeDetail" parameterType="String" resultType="MenteeDTO">
        SELECT mentee_member_id, mentee_content_id
        FROM MENTEE
        WHERE mentee_member_id = #{menteeMemberId}
    </select> -->

    <select id="getMenteeCharacterInfo" parameterType="String" resultType="map">
        SELECT 
            character_nickname AS characterNickname,
            item_level AS itemLevel,
            server_name AS serverName,
            roster_level AS rosterLevel
        FROM MEMBER_CHARACTER
        WHERE member_id = #{menteeMemberId}
        LIMIT 1
    </select>

    <!-- 멘토가 받은 모든 멘티 신청 이력(REQUESTED, ACCEPTED, REJECTED) 조회 -->
    <select id="getAllMenteeAppliesByMentor" parameterType="string" resultType="map">
        SELECT 
            MA.mentee_member_id,
            MA.apply_status,
            MC.CHARACTER_NICKNAME as mentee_nickname,
            MC.ITEM_LEVEL as mentee_item_level,
            MC.SERVER_NAME as mentee_server_name,
            MA.mentor_member_id
        FROM MENTEE_APPLY MA
        JOIN MEMBER_CHARACTER MC ON MA.mentee_member_id = MC.MEMBER_ID
        WHERE MA.mentor_member_id = #{mentorMemberId}
        ORDER BY MA.mentee_member_id DESC
    </select>

    <!-- 멘티가 보낸 모든 멘토링 신청 이력(REQUESTED, ACCEPTED, REJECTED) 조회 -->
    <select id="getAllMenteeAppliesByMentee" parameterType="string" resultType="map">
        SELECT 
            MA.mentor_member_id,
            MA.apply_status,
            MC.character_nickname as mentor_nickname,
            MC.item_level as mentor_item_level,
            MC.server_name as mentor_server_name,
            MA.mentee_member_id
        FROM MENTEE_APPLY MA
        JOIN MEMBER_CHARACTER MC ON MA.mentor_member_id = MC.member_id
        WHERE MA.mentee_member_id = #{menteeMemberId}
        ORDER BY MA.mentor_member_id DESC
    </select>

</mapper>