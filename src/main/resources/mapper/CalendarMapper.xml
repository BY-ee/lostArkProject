<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.teamProject.lostArkProject.calendar.dao.CalendarDAO">
    <insert id="insertCalendar" parameterType="com.teamProject.lostArkProject.calendar.domain.Calendar"
            useGeneratedKeys="true" keyProperty="calendarId">
        INSERT INTO calendar (category_name, contents_name, contents_icon, min_item_level, location)
        VALUES (#{categoryName}, #{contentsName}, #{contentsIcon}, #{minItemLevel}, #{location})
    </insert>

    <insert id="insertStartTime" parameterType="com.teamProject.lostArkProject.calendar.domain.StartTime">
        INSERT INTO startTime (calendar_id, start_time)
        VALUES
            <foreach collection="list" item="startTime" separator=",">
                (#{startTime.calendarId}, #{startTime.startTime})
            </foreach>
    </insert>

    <insert id="insertRewardItem" parameterType="com.teamProject.lostArkProject.calendar.domain.RewardItem"
            useGeneratedKeys="true" keyProperty="rewardItemId">
        INSERT INTO rewardItem (calendar_id, item_level)
        VALUES
        <foreach collection="list" item="rewardItem" separator=",">
            (#{rewardItem.calendarId}, #{rewardItem.itemLevel})
        </foreach>
    </insert>


    <insert id="insertItem" parameterType="com.teamProject.lostArkProject.calendar.domain.Item">
        INSERT INTO item (reward_item_id, name, icon, grade)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.rewardItemId}, #{item.name}, #{item.icon}, #{item.grade})
        </foreach>
    </insert>


    <!-- Calendar 테이블에서 데이터를 조회하는 기본 쿼리 -->
<!--    <select id="selectCalendar" resultMap="CalendarResultMap">-->
<!--        SELECT * FROM Calendar WHERE id = #{id}-->
<!--    </select>-->

<!--    <resultMap id="calendarResultMap" type="com.teamProject.lostArkProject.calendar.domain.Calendar">-->
<!--        &lt;!&ndash; Calendar의 필드 매핑 &ndash;&gt;-->
<!--        <id property="id" column="id"/>-->
<!--        <result property="categoryName" column="category_name"/>-->
<!--        <result property="contentsName" column="contents_name"/>-->
<!--        <result property="contentsIcon" column="contents_icon"/>-->
<!--        <result property="minItemLevel" column="min_item_level"/>-->
<!--        <result property="location" column="location"/>-->

<!--        &lt;!&ndash; StartTimes의 컬렉션 매핑 &ndash;&gt;-->
<!--        <collection property="startTimes" ofType="com.teamProject.lostArkProject.calendar.domain.StartTime">-->
<!--            <result property="startTime" column="start_time"/>-->
<!--        </collection>-->

<!--        &lt;!&ndash; RewardItems의 컬렉션 매핑 &ndash;&gt;-->
<!--        <collection property="rewardItems" ofType="com.teamProject.lostArkProject.calendar.domain.RewardItem">-->
<!--            <result property="itemLevel" column="item_level"/>-->

<!--            &lt;!&ndash; RewardItem 안의 Items 컬렉션 매핑 &ndash;&gt;-->
<!--            <collection property="items" ofType="com.teamProject.lostArkProject.calendar.domain.Item">-->
<!--                <result property="name" column="name"/>-->
<!--                <result property="icon" column="icon"/>-->
<!--                <result property="grade" column="grade"/>-->
<!--            </collection>-->
<!--        </collection>-->
<!--    </resultMap>-->


<!--    <select id="selectUser" parameterType="com.example.springpractice.dto.User">-->
<!--        select * from user where email = #{email} and password = #{password}-->
<!--    </select>-->
<!--    <update id="updateUser" parameterType="com.example.springpractice.dto.User">-->
<!--        update user set username = #{username}, password = #{password} , email = #{email} where id= #{id}-->
<!--    </update>-->
<!--    <update id="updateUserAvatar" parameterType="com.example.springpractice.dto.User">-->
<!--        update user set avatar_url = #{avatar_url} where id = #{id}-->
<!--    </update>-->
<!--    <delete id="deleteUser" parameterType="com.example.springpractice.dto.User">-->
<!--        delete from user where email = #{email}-->
<!--    </delete>-->
</mapper>